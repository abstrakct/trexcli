#!/usr/bin/python
# 
# Simple program to interact with bittrex.com's API
#
# Needs python 3.5 or higher
# 

# TODO: error checking / check results of queries.
# e.g. if there are no open orders, print "no open orders" or something.

import sys
import argparse
import json
from bittrex import Bittrex
from pathlib import Path
from datetime import datetime

base_url = 'https://bittrex.com/api/v1.1/'

def print_ticker(bittrex, args):
    market = args.basecurrency + '-' + args.marketcurrency
    result = json.loads(json.dumps(bittrex.get_ticker(market)))
    
    if args.f:         # TODO: rewrite this!
        args.s = False
        print('{:.2f}'.format(result['result']['Last']))
    if args.s:
        print('{:.8f}'.format(result['result']['Last']))

def print_wallet(bittrex, args):
    out = json.loads(json.dumps(bittrex.get_balance(args.wallet)))
    print('{0:5} {1:15.8f} total {2:15.8f} available'.format(out['result']['Currency'], out['result']['Balance'], out['result']['Available']))

def print_balances(bittrex, args):
    out = json.loads(json.dumps(bittrex.get_balances()))
    for x in out['result']:
        if args.n:
            if x['Balance'] > 0:
                doprint = True;
            else:
                doprint = False
        else:
            doprint = True

        if doprint:
            print('{0:5} {1:15.8f} total {2:15.8f} available'.format(x['Currency'], x['Balance'], x['Available']))

def print_orderhistory(bittrex, args):
    if args.market == 'all':
        out = json.loads(json.dumps(bittrex.get_order_history()))
        print("Order history: ")
    else:
        out = json.loads(json.dumps(bittrex.get_order_history(args.market)))
        print("Order history for {0}: ".format(args.market))

    for x in out['result']:
        timestamp = datetime.strptime(x['TimeStamp'], '%Y-%m-%dT%H:%M:%S.%f')
        if x['OrderType'] == 'LIMIT_SELL':
            print('{4} {0:10} Sold   {1:15.8f} units at total price {2:10.8f} ({3:10.8f} per unit)'.format(x['Exchange'], x['Quantity'], x['Price'], x['PricePerUnit'], timestamp.strftime('%Y-%m-%d %H:%M:%S')))
        if x['OrderType'] == 'LIMIT_BUY':
            print('{4} {0:10} Bought {1:15.8f} units at total price {2:10.8f} ({3:10.8f} per unit)'.format(x['Exchange'], x['Quantity'], x['Price'], x['PricePerUnit'], timestamp.strftime('%Y-%m-%d %H:%M:%S')))

def print_openorders(bittrex, args):
    if args.market == 'all':
        out = json.loads(json.dumps(bittrex.get_open_orders()))
    else:
        out = json.loads(json.dumps(bittrex.get_open_orders(args.market)))
    #print(json.dumps(out, indent=4, sort_keys=True))

    print("Open orders: ")
    for x in out['result']:
        if x['OrderType'] == 'LIMIT_SELL':
            print('{0}: Limit sell {1:15.8f} units ({2:15.8f} remaining) at price {3:15.8f}'.format(x['Exchange'], x['QuantityRemaining'], x['Quantity'], x['Limit']))
        if x['OrderType'] == 'LIMIT_BUY':
            print('{0}: Limit buy {1:15.8f} units ({2:15.8f} remaining) at price {3:15.8f}'.format(x['Exchange'], x['QuantityRemaining'], x['Quantity'], x['Limit']))

def print_deposithistory(bittrex, args):
    out = json.loads(json.dumps(bittrex.get_deposit_history()))

    for x in out['result']:
        timestamp = datetime.strptime(x['LastUpdated'], '%Y-%m-%dT%H:%M:%S.%f')
        print('{0} {1:15.8f} {2} - Confirmations: {3}'.format(timestamp.strftime('%Y-%m-%d %H:%M:%S'), x['Amount'], x['Currency'], x['Confirmations']))
    #print(json.dumps(out, indent=4))

def print_withdrawalhistory(bittrex, args):
    out = json.loads(json.dumps(bittrex.get_withdrawal_history()))

    for x in out['result']:
        timestamp = datetime.strptime(x['Opened'], '%Y-%m-%dT%H:%M:%S.%f')
        print('{0} {1:15.8f} {2:5} - Address: {4:42} - Transaction cost: {3}'.format(timestamp.strftime('%Y-%m-%d %H:%M:%S'), x['Amount'], x['Currency'], x['TxCost'], x['Address'].rjust(42)))

# def print_pendingdeposits(bittrex, args):
    #out = json.loads(json.dumps(bittrex.get_pending_deposits()))
    #print(json.dumps(out, indent=4))


def main(argv):
    market = ''

    # Get user's home directory
    home = str(Path.home())
    # Create full filename for secrets file
    # TODO: Add windows support. This only works on linux/unix now - I assume.
    secrets_filename = home + "/.config/trex/secrets.json"

    with open(secrets_filename) as secrets_file:
        secrets = json.load(secrets_file)
        secrets_file.close()
    bittrex = Bittrex(secrets['key'], secrets['secret'])

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest = 'command', help = 'Which action to perform')

    # ticker command
    parser_ticker = subparsers.add_parser('ticker', help = 'Show a ticker')
    parser_ticker.add_argument("basecurrency", help="Base currency symbol (e.g. BTC)")
    parser_ticker.add_argument("marketcurrency", help="Market currency symbol (e.g. NEO)")
    group = parser_ticker.add_mutually_exclusive_group()
    group.add_argument("-s", help="Format output as satoshi (8 decimal places) (default)", action="store_true", default=True)
    group.add_argument("-f", help="Format output as fiat (2 decimal places)", action="store_true", default=False)

    # wallet command
    parser_wallet = subparsers.add_parser('wallet', help = 'Show info about a wallet in your account')
    parser_wallet.add_argument("wallet", help="Which wallet to show.")

    # balances command
    parser_balances = subparsers.add_parser('balances', help = 'Show all balances in your account')
    parser_balances.add_argument("-n", help = 'Show only wallets with non-zero balance', action = "store_true", default = False)

    # order history command
    parser_orderhistory = subparsers.add_parser('orderhistory', help = 'Show recent order history for your account')
    parser_orderhistory.add_argument("market", help = 'Show order history only for this market (optional)', nargs='?', action = "store", default = 'all')

    # open orders command
    parser_openorders = subparsers.add_parser('openorders', help = 'Show open orders in your account')
    parser_openorders.add_argument("market", help = 'Show open orders only for this market (optional)', nargs='?', action = "store", default = 'all')

    # deposit history command
    parser_deposithistory = subparsers.add_parser('deposithistory', help = 'Show the deposit history of your account')
    
    # withdrawal history command
    parser_withdrawalhistory = subparsers.add_parser('withdrawalhistory', help = 'Show the withdrawal history of your account')
    
    # pending deposits command
    # Only available in API v2.0, so disabled for now
    #parser_pendingdeposits = subparsers.add_parser('pendingdeposits', help = 'Show the pending deposits to your account')
    
    # pending withdrawals command
    # Only available in API v2.0, so disabled for now
    # parser_pendingwithdrawals = subparsers.add_parser('withdrawalhistory', help = 'Show the pending withdrawals from your account')
    
    # print help and exit if no arguments given
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    # Parse the args, do appropriate action
    args = parser.parse_args()
    
    if args.command == 'ticker':
        print_ticker(bittrex, args)

    if args.command == 'wallet':
        print_wallet(bittrex, args)

    if args.command == 'balances':
        print_balances(bittrex, args)

    if args.command == 'orderhistory':
        print_orderhistory(bittrex, args)

    if args.command == 'openorders':
        print_openorders(bittrex, args)

    if args.command == 'deposithistory':
        print_deposithistory(bittrex, args)

    if args.command == 'withdrawalhistory':
        print_withdrawalhistory(bittrex, args)

    #if args.command == 'pendingdeposits':
        #print_pendingdeposits(bittrex, args)

if __name__ == "__main__":
    main(sys.argv[1:])
